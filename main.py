import time
import buttons
import messages as mg
from base.ORM import BrotherCryptoBot
from threading import Thread
from config import TOKEN, PAY_TOKEN
from aiogram.dispatcher.filters import Text
from aiogram.types.message import ContentType
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import aiogram.utils.markdown as md
import aioschedule


bot = Bot(token=TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot)
db = BrotherCryptoBot()


# class Mess(StateGroup):
#     text = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if db.check_user(message.from_user.id) == []:
        db.add_user(user_id=message.from_user.id)
        await message.answer('*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*',
                        reply_markup=buttons.main_menu)
        await message.answer(
        """–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–¢–∞—Ä–∏—Ñ—ã¬ª –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è  –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã –Ω–µ –ø–æ–∂–∞–ª–µ–µ—Ç–µ üöÄ\n
–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —É —Å–µ–±—è –≤ –∫–æ–º–∞–Ω–¥–µ! ü§ù\n
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—Éüëá\n@username
                                """, reply_markup=buttons.tarif)
    else:
        await message.answer('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!!!', reply_markup=buttons.main_menu)

# -------------------------- –¢–∞—Ä–∏—Ñ—ã -------------------------------------
@dp.message_handler(Text('–¢–∞—Ä–∏—Ñ—ã üöÄ'))
async def tarifs_reply(message: types.Message):
    await message.answer('–¢–∞—Ä–∏—Ñ—ã', reply_markup=buttons.tarifs)


@dp.callback_query_handler(lambda c: c.data == 'tarif')
async def tarifs(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,
                        '–¢–∞—Ä–∏—Ñ—ã',
                        reply_markup=buttons.tarifs)


@dp.callback_query_handler(lambda c: c.data == 'level_1')
async def level_1(callback: types.CallbackQuery):
    PRICE = types.LabeledPrice(label='–¢–∞—Ä–∏—Ñ: –ù–µ–¥–µ–ª—è (1 —É—Ä.) - 150‚ÇΩ ü¶ã', amount=15000)
    if PAY_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(callback.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_invoice(callback.from_user.id,
                        title="–¢–∞—Ä–∏—Ñ: –ù–µ–¥–µ–ª—è (1 —É—Ä.) - 150‚ÇΩ ü¶ã",
                        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é",
                        provider_token=PAY_TOKEN,
                        currency="rub",
                        is_flexible=False,
                        prices=[PRICE],
                        start_parameter="one-month-subscription",
                        payload="test-invoice-payload")


@dp.callback_query_handler(lambda c: c.data == 'level_2')
async def level_2(callback: types.CallbackQuery):
    PRICE = types.LabeledPrice(label='–ú–µ—Å—è—Ü (2 —É—Ä.) - 500‚ÇΩ üòá', amount=50000)
    if PAY_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(callback.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_invoice(callback.from_user.id,
                        title="–¢–∞—Ä–∏—Ñ: –ú–µ—Å—è—Ü (2 —É—Ä.) - 500‚ÇΩ üòá",
                        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                        provider_token=PAY_TOKEN,
                        currency="rub",
                        is_flexible=False,
                        prices=[PRICE],
                        start_parameter="one-month-subscription",
                        payload="test-invoice-payload")


@dp.callback_query_handler(lambda c: c.data == 'level_3')
async def level_3(callback: types.CallbackQuery):
    PRICE = types.LabeledPrice(label='–ì–æ–¥ (3 —É—Ä.) - 1500‚ÇΩ ü§ë', amount=150000)
    if PAY_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(callback.from_user.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    await bot.send_invoice(callback.from_user.id,
                        title="–¢–∞—Ä–∏—Ñ: –ì–æ–¥ (3 —É—Ä.) - 1500‚ÇΩ ü§ë",
                        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –≥–æ–¥",
                        provider_token=PAY_TOKEN,
                        currency="rub",
                        is_flexible=False,
                        prices=[PRICE],
                        start_parameter="one-month-subscription",
                        payload="test-invoice-payload")


# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")
    pay = message.successful_payment.total_amount // 100
    if pay == 150:
        db.set_tarif(user_id=message.from_user.id, tarif=1, time=18)
    elif pay == 500:
        db.set_tarif(user_id=message.from_user.id, tarif=2, time=43200)
    else:
        db.set_tarif(user_id=message.from_user.id, tarif=3, time=482880)
    await bot.send_message(message.chat.id,
                            f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {pay} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")
# ---------------------------------------------------------------------------


@dp.message_handler(Text('–ú–æ–π —Ç–∞—Ä–∏—Ñ ‚è≥'))
async def my_tarif(message: types.Message):
    tar = db.get_tarif(user_id=message.from_user.id)
    time = db.get_time(user_id=message.from_user.id)

    if tar != None:
        await message.answer(f'–í–∞—à —Ç–∞—Ä–∏—Ñ: {tar} —É—Ä–æ–≤–Ω—è\n{mg.decription[tar]}\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {time}' if tar != None else '–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ') 
    else: await message.answer('–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ')

@dp.message_handler(Text('–û—Ç–∑—ã–≤—ã üìñ'))
async def answers(message: types.Message):
    link = '–æ—Ç–∑—ã–≤—ã'
    await message.answer(f'–ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏: @{link}')


@dp.message_handler(Text('–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã üë®‚Äçüíª'))
async def kurs(message: types.Message):
    tar = db.get_tarif(user_id=message.from_user.id)
    if tar == 1:
        await message.answer('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å–∞–º –Ω—É–∂–Ω–æ –æ–±–ª–∞–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π 2 –∏–ª–∏ 3 —É—Ä–æ–≤–Ω—è')
    else:
        await message.answer('–ö–∞–Ω–∞–ª —Å –æ–±—É—á–∞—é—â–∏–º–∏ —É—Ä–æ–∫–∞–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏ - @–∫–∞–Ω–∞–ª')

@dp.message_handler(commands=['/send_message'])
async def send_message(message: types.Message):
    ...

# @dp.message_handler(state=)
# async def send_mess(message: types.Message):
#     users = db.users_with_tarif()
#     for i in users:
#         await bot.send_message(i[0], text=my_text)


def update_time():
    users = db.get_all_user_id()
    while True:
        for i in users:
            if i[1] != None:
                db.set_time(user_id=i[0], time=i[1]-1)
            else: pass
        time.sleep(1)



if __name__ == '__main__':
    thread = Thread(target=executor.start_polling, args=(dp)).run()
    # executor.start_polling(dp, skip_updates=True)
    thread_1 = Thread(target=update_time, daemon=True)
    thread_1.start()