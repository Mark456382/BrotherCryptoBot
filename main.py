import buttons
from base.ORM import BrotherCryptoBot
from config import TOKEN
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, executor, types


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
db = BrotherCryptoBot()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if db.check_user(message.from_user.id) == []:
        db.add_user(user_id=message.from_user.id)
        await message.answer('*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*',
                        reply_markup=buttons.main_menu)
        await message.answer(
        """–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–¢–∞—Ä–∏—Ñ—ã¬ª –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è  –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã –Ω–µ –ø–æ–∂–∞–ª–µ–µ—Ç–µ üöÄ\n
–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —É —Å–µ–±—è –≤ –∫–æ–º–∞–Ω–¥–µ! ü§ù\n
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—Éüëá\n@username
                                """, reply_markup=buttons.tarif)
    else:
        await message.answer('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!!!')


@dp.message_handler(Text('–¢–∞—Ä–∏—Ñ—ã üöÄ'))
async def tarifs_reply(message: types.Message):
    await message.answer('–¢–∞—Ä–∏—Ñ—ã', reply_markup=buttons.tarifs)


@dp.callback_query_handler(lambda c: c.data == 'tarif')
async def tarifs(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id,
                        '–¢–∞—Ä–∏—Ñ—ã',
                        reply_markup=buttons.tarifs)


@dp.message_handler(Text('–ú–æ–π —Ç–∞—Ä–∏—Ñ ‚è≥'))
async def my_tarif(message: types.Message):
    tar = None
    await message.answer(f'–í–∞—à —Ç–∞—Ä–∏—Ñ: {tar}')


@dp.message_handler(Text('–û—Ç–∑—ã–≤—ã üìñ'))
async def answers(message: types.Message):
    link = 'link'
    await message.answer(f'–ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏: {link}')


@dp.message_handler(Text('–û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã üë®‚Äçüíª'))
async def kurs(message: types.Message):
    await message.answer('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å–∞–º –Ω—É–∂–Ω–æ –æ–±–ª–∞–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π 2 –∏–ª–∏ 3 —É—Ä–æ–≤–Ω—è')
    await message.answer('–ö–∞–Ω–∞–ª —Å –æ–±—É—á–∞—é—â–∏–º–∏ —É—Ä–æ–∫–∞–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏ - @–∫–∞–Ω–∞–ª')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
